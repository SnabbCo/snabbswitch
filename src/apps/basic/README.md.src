# Basic Apps (apps.basic.basic_apps)

The module *apps.basic.basic_apps* provides apps with general
functionality for use in you app networks.

## Source

The `Source` app is a synthetic packet generator. On each breath it fills
each attached output link with new packets. The packet data is
uninitialized garbage and each packet is 60 bytes long.

    DIAGRAM: Source
    +--------+
    |        |
    |        *---- (any)
    |        |
    | Source *---- (any)
    |        |
    |        *---- (any)
    |        |
    +--------+

## Join

The `Join` app joins together packets from N input links onto one
output link. On each breath it outputs as many packets as possible
from the inputs onto the output.

    DIAGRAM: Join
              +--------+
              |        |
    (any) ----*        |
              |        |
    (any) ----*  Join  *----- out
              |        |
    (any) ----*        |
              |        |
              +--------+

## Split

The `Split` app splits packets from multiple inputs across multiple
outputs. On each breath it transfers as many packets as possible from
the input links to the output links.

    DIAGRAM: Split
              +--------+
              |        |
    (any) ----*        *----- (any)
              |        |
    (any) ----* Split  *----- (any)
              |        |
    (any) ----*        *----- (any)
              |        |
              +--------+

## Sink

The `Sink` app receives all packets from any number of input links and
discards them. This can be handy in combination with a `Source`.

    DIAGRAM: Sink
              +--------+
              |        |
    (any) ----*        |
              |        |
    (any) ----*  Sink  |
              |        |
    (any) ----*        |
              |        |
              +--------+

## Tee

The `Tee` app receives all packets from any number of input links and
transfers each received packet to all output links. It can be used to
merge and/or duplicate packet streams

    DIAGRAM: Tee
              +--------+
              |        |
    (any) ----*        *----- (any)
              |        |
    (any) ----*  Tee   *----- (any)
              |        |
    (any) ----*        *----- (any)
              |        |
              +--------+

## Repeater

The `Repeater` app collects all packets received from the `input` link
and repeatedly transfers the accumulated packets to the `output`
link. The packets are transmitted in the order they were received.

    DIAGRAM: Repeater
              +----------+
              |          |
              |          |
    input ----* Repeater *----- output
              |          |
              |          |
              +----------+

## Match
The `Match` app compares packets received on `rx` with those received on
the reference input `comparator`.
```
config.app(c, "match", apps.Match, { mode = "exact" | "monotonic" })
```
In exact mode every packet received on `rx` must also be received on
`comparator` and every packet received on `comparator` must also be received
on `rx`. The packets must arrive in the same order
rx.pkt1 == comparator.pkt1
rx.pkt2 == comparator.pkt2
rx.pkt3 == comparator.pkt3
rx.pkt4 == comparator.pkt4

In monotonic mode packets can be received on rx that don't have a corresponding
packet on comparator.
rx.pkt1 == comparator.pkt1
rx.pkt2 == skipped
rx.pkt3 == comparator.pkt2
rx.pkt4 == comparator.pkt3
rx.pkt4 == skipped

Errors including packet hexdumps can be access via
```engine.app_table.MatchAppName:errors()``` which returns a table of error strings.

    DIAGRAM: Match
              +----------+
              |          |
       rx ----*          |
              |   Match  |
comparator ---*          |
              |          |
              +----------+