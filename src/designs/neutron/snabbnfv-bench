#!/usr/bin/env snabb

local app = require("core.app")
local ffi = require("ffi")
local C = ffi.C
local lib = require("core.lib")
local config = require("lib.nfv.config")

if #main.parameters ~= 4 then
   print([[Usage: snabbnfv-bench <pci-address> <config-file> <socket-path> <npackets>

Process <npackets> between Neutron port and a physical NIC and calculate
performance in millions of packets per second (Mpps).]])
   main.exit(1)
end

function run (pciaddr, confpath, sockpath, npackets)
   npackets = tonumber(npackets)
   local ports = dofile(confpath)
   local virtio = "Virtio_"..(config.port_name(ports[1]))
   engine.log = true

   print("Loading " .. confpath)
   config.apply(config.load(confpath, pciaddr, sockpath))

   -- From designs/nfv
   local start, packets, bytes = 0, 0, 0
   local done = function ()
      if start == 0 and app.app_table[virtio].input.rx.stats.rxpackets > 0 then
         -- started receiving, record time and packet count
         packets = app.app_table[virtio].input.rx.stats.rxpackets
         bytes = app.app_table[virtio].input.rx.stats.rxbytes
         start = C.get_monotonic_time()
         if os.getenv("NFV_PROF") then
            require("jit.p").start(os.getenv("NFV_PROF"))
            main.profiling = true
         else
            print("No LuaJIT profiling enabled ($NFV_PROF unset).")
         end
      end
      return app.app_table[virtio].input.rx.stats.rxpackets - packets >= npackets
   end

   app.main({done = done, no_report = true})
   local finish = C.get_monotonic_time()

   local runtime = finish - start
   packets = app.app_table[virtio].input.rx.stats.rxpackets - packets
   bytes = app.app_table[virtio].input.rx.stats.rxbytes - bytes
   engine.report()
   print()
   print(("Processed %.1f million packets in %.2f seconds (%d bytes; %.2f Gbps)"):format(packets / 1e6, runtime, bytes, bytes * 8.0 / 1e9 / runtime))
   print(("Made %s breaths: %.2f packets per breath; %.2fus per breath"):format(lib.comma_value(engine.breaths), packets / engine.breaths, runtime / engine.breaths * 1e6))
   print(("Rate(Mpps):\t%.3f"):format(packets / runtime / 1e6))
end

run(unpack(main.parameters))
